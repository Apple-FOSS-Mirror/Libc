--- local.h.orig	2011-02-15 10:44:57.000000000 -0800
+++ local.h	2011-02-15 11:16:59.000000000 -0800
@@ -33,8 +33,11 @@
  * $FreeBSD: src/lib/libc/stdio/local.h,v 1.33 2008/05/05 16:03:52 jhb Exp $
  */
 
+#include <sys/cdefs.h>
+#include "xlocale_private.h"
 #include <sys/types.h>	/* for off_t */
 #include <pthread.h>
+#include <limits.h>
 #include <string.h>
 #include <wchar.h>
 
@@ -50,36 +53,69 @@
 extern int	_fseeko(FILE *, off_t, int, int);
 extern int	__fflush(FILE *fp);
 extern void	__fcloseall(void);
-extern wint_t	__fgetwc(FILE *);
-extern wint_t	__fputwc(wchar_t, FILE *);
+extern wint_t	__fgetwc(FILE *, locale_t);
+extern wint_t	__fputwc(wchar_t, FILE *, locale_t);
 extern int	__sflush(FILE *);
-extern FILE	*__sfp(void);
+extern FILE	*__sfp(int);
+extern void	__sfprelease(FILE *);	/* mark free and update count as needed */
 extern int	__slbexpand(FILE *, size_t);
 extern int	__srefill(FILE *);
+extern int	__srefill0(FILE *);
+extern int	__srefill1(FILE *);
 extern int	__sread(void *, char *, int);
 extern int	__swrite(void *, char const *, int);
 extern fpos_t	__sseek(void *, fpos_t, int);
 extern int	__sclose(void *);
 extern void	__sinit(void);
 extern void	_cleanup(void);
+extern void	(*__cleanup)(void);
 extern void	__smakebuf(FILE *);
 extern int	__swhatbuf(FILE *, size_t *, int *);
 extern int	_fwalk(int (*)(FILE *));
-extern int	__svfscanf(FILE *, const char *, __va_list);
+extern int	__svfscanf_l(FILE *, locale_t, const char *, __va_list) __DARWIN_LDBL_COMPAT(__svfscanf_l);
 extern int	__swsetup(FILE *);
 extern int	__sflags(const char *, int *);
 extern int	__ungetc(int, FILE *);
-extern wint_t	__ungetwc(wint_t, FILE *);
-extern int	__vfprintf(FILE *, const char *, __va_list);
-extern int	__vfscanf(FILE *, const char *, __va_list);
-extern int	__vfwprintf(FILE *, const wchar_t *, __va_list);
-extern int	__vfwscanf(FILE * __restrict, const wchar_t * __restrict,
-		    __va_list);
+extern wint_t	__ungetwc(wint_t, FILE *, locale_t);
+extern int	__vfprintf(FILE *, locale_t, const char *, __va_list) __DARWIN_LDBL_COMPAT(__vfprintf);
+extern int	__vfscanf(FILE *, const char *, __va_list) __DARWIN_LDBL_COMPAT(__vfscanf);
+extern int	__vfwprintf(FILE *, locale_t, const wchar_t *, __va_list) __DARWIN_LDBL_COMPAT(__vfwprintf);
+extern int	__vfwscanf(FILE * __restrict, locale_t, const wchar_t * __restrict,
+		    __va_list) __DARWIN_LDBL_COMPAT(__vfwscanf);
 extern size_t	__fread(void * __restrict buf, size_t size, size_t count,
 		FILE * __restrict fp);
 extern int	__sdidinit;
 
 
+/* hold a buncha junk that would grow the ABI */
+struct __sFILEX {
+	unsigned char	*up;	/* saved _p when _p is doing ungetc data */
+	pthread_mutex_t	fl_mutex;	/* used for MT-safety */
+	pthread_t	fl_owner;	/* current owner */
+	int		fl_count;	/* recursive lock count */
+	int		orientation:2;	/* orientation for fwide() */
+	int		counted:1;	/* stream counted against STREAM_MAX */
+	mbstate_t	mbstate;	/* multibyte conversion state */
+};
+
+#define _up 		_extra->up
+#define _fl_mutex	_extra->fl_mutex
+#define _fl_owner	_extra->fl_owner
+#define _fl_count	_extra->fl_count
+#define _orientation	_extra->orientation
+#define _mbstate	_extra->mbstate
+#define _counted	_extra->counted
+
+#define	INITEXTRA(fp) do { \
+	(fp)->_extra->up = NULL; \
+	(fp)->_extra->fl_mutex = (pthread_mutex_t)PTHREAD_MUTEX_INITIALIZER; \
+	(fp)->_extra->fl_owner = NULL; \
+	(fp)->_extra->fl_count = 0; \
+	(fp)->_extra->orientation = 0; \
+	memset(&(fp)->_extra->mbstate, 0, sizeof(mbstate_t)); \
+	(fp)->_extra->counted = 0; \
+} while(0);
+
 /*
  * Prepare the given FILE for writing, and return 0 iff it
  * can be written now.  Otherwise, return EOF and set errno.

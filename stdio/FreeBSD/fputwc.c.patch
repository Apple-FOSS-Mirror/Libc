--- fputwc.c.orig	2004-11-25 11:38:34.000000000 -0800
+++ fputwc.c	2005-02-23 17:21:10.000000000 -0800
@@ -27,6 +27,8 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/stdio/fputwc.c,v 1.10 2004/07/20 08:27:27 tjr Exp $");
 
+#include "xlocale_private.h"
+
 #include "namespace.h"
 #include <errno.h>
 #include <limits.h>
@@ -41,13 +43,14 @@
 /*
  * Non-MT-safe version.
  */
-wint_t
-__fputwc(wchar_t wc, FILE *fp)
+__private_extern__ wint_t
+__fputwc(wchar_t wc, FILE *fp, locale_t loc)
 {
 	char buf[MB_LEN_MAX];
 	size_t i, len;
+	struct __xlocale_st_runelocale *xrl = loc->__lc_ctype;
 
-	if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX) {
+	if (xrl->__mb_cur_max == 1 && wc > 0 && wc <= UCHAR_MAX) {
 		/*
 		 * Assume single-byte locale with no special encoding.
 		 * A more careful test would be to check
@@ -56,7 +59,7 @@
 		*buf = (unsigned char)wc;
 		len = 1;
 	} else {
-		if ((len = __wcrtomb(buf, wc, &fp->_extra->mbstate)) ==
+		if ((len = xrl->__wcrtomb(buf, wc, &fp->_extra->mbstate, loc)) ==
 		    (size_t)-1) {
 			fp->_flags |= __SERR;
 			return (WEOF);
@@ -80,7 +83,21 @@
 
 	FLOCKFILE(fp);
 	ORIENT(fp, 1);
-	r = __fputwc(wc, fp);
+	r = __fputwc(wc, fp, __current_locale());
+	FUNLOCKFILE(fp);
+
+	return (r);
+}
+
+wint_t
+fputwc_l(wchar_t wc, FILE *fp, locale_t loc)
+{
+	wint_t r;
+
+	NORMALIZE_LOCALE(loc);
+	FLOCKFILE(fp);
+	ORIENT(fp, 1);
+	r = __fputwc(wc, fp, loc);
 	FUNLOCKFILE(fp);
 
 	return (r);

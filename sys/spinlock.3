.Dd May 26, 2004
.Dt SPINLOCK 3
.Os Darwin
.Sh NAME
.Nm OSSpinLockTry ,
.Nm OSSpinLockLock ,
.Nm OSSpinLockUnlock
.Nd atomic spin lock synchronization primitives
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In libkern/OSAtomic.h
.Ft bool
.Fn OSSpinLockTry "OSSpinLock *lock"
.Ft void
.Fn OSSpinLockLock "OSSpinLock *lock"
.Ft void
.Fn OSSpinLockUnlock "OSSpinLock *lock"
.Sh DESCRIPTION
Spin locks are a simple, fast, thread-safe synchronization primitive that is
suitable in situations where contention is expected to be low.  The spinlock
operations use memory barriers to synchronize access to shared memory protected
by the lock.  Preemption is possible while the lock is held.
.Pp
.Ft OSSpinLock
is an integer type.  The convention is that unlocked is zero, and locked is nonzero.
Locks must be naturally aligned and cannot be in cache-inhibited memory.
.Pp
.Fn OSSpinLockLock
will spin if the lock is already held, but employs various strategies to back off,
making it immune to most priority-inversion livelocks.  But because it can spin, it
may be inefficient in some situations.
.Pp
.Fn OSSpinLockTry
immediately returns false if the lock was held, true if it took the lock.
It does not spin.
.Pp
.Fn OSSpinLockUnlock
unconditionally unlocks the lock by zeroing it.
.Sh RETURN VALUES
.Fn OSSpinLockTry
returns true if it took the lock, false if the lock was already held.
.Sh SEE ALSO
.Xr atomic 3 ,
.Xr barrier 3

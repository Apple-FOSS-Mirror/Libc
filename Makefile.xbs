# This is a replacement for bsd.lib.mk for the libc project to get it
# doing the Right Thing in XBS, which is substantially different than
# the BSD build system.
#
# The main problems arise when libc.a isn't meant to be static, but
# libc_static.a is.  We also build a debug version of the library
# in addition to shared, static, and profile.  Also, we build all 
# versions of libc with debugging enabled, unstripped.  The BSD style
# is to strip every object file after it is built but here, libc.a
# will get merged into the larger libSystem.dylib, which will eventually
# be stripped.  We also don't build a libc.dylib, since it will be
# munged into libSystem.dylib.
#
# And another difference, B&I wishes to build the 4 incarnations of Libc
# in parallel on different machines.  To do this, we must look at the
# RC_ProjectName variable (which B&I sets) to determine which of the 4
# versions of Libc we will be building.  Remember that the installhdrs
# pass should only be invoked on one of the 4 versions, and man pages
# should only be installed once as well.  Both of these get done when
# we're invoked as "Libc".

MYBSDMAKE = ${BSDMAKE} -f Makefile

.PATH: .
.MAIN: all
all: libc.a libc_static.a libc_debug.a libc_profile.a
install: ${SYMROOTINC}/${MACHINE_ARCH}/libc-features.h installhdrs install_libc.a \
	 install_libc_profile.a install_libc_debug.a \
	 maninstall

.SUFFIXES:
.SUFFIXES: .o .po .So .do
.SUFFIXES: .S .s .c .cc .cpp .cxx .m .C
.SUFFIXES: -fbsd.c -nbsd.c -obsd.c -uuid.c
.SUFFIXES: .f .y .l .defs .h
.SUFFIXES: User.c User.o User.po User.So User.do
.SUFFIXES: Server.c Server.o Server.po Server.So Server.do
.SUFFIXES: .3-uuid.in .3

OBJS+=  ${SRCS:N*.h:R:S/$/.o/g}
DOBJS+= ${OBJS:.o=.do}
POBJS+= ${OBJS:.o=.po} ${STATICOBJS:.o=.po}
SOBJS+= ${OBJS:.o=.So}

#### Variant Rules ####################################################
# The following magic is used for variants to avoid the exponental explosion
# of suffix rules.  To add a variant, select a name (typically all-caps).
# Add that name to the VARIANTS variable.  Create a CFLAGS_XXX variable
# (XXX is the variant name) that contains the extra flags to pass to the
# compiler (currently, no slashes are permitted in the flags).  Then, just
# define a XXXSRCS variable with the names of the files to recompile with the
# additional flags.  For auto-patched files, don't use the auto-patched file
# name.  Just use the original file name.
#
# Note that this magic also deals with combinations of variants; e.g.,
# for two variants XXX and YYY, there are three variant combinations,
# XXX, XXX-YYY and YYY.  In this example, you can use XXX-YYYSRCS to
# specify sources that will build with both the CFLAGS_XXX and CFLAGS_YYY
# flags set.  The variants are always in alphabetic order.
#
# The DYLD variant is special; it builds a separate archive for use by dyld,
# and contains customized binaries that are used to override the behavior of
# the corresponding binaries in libc.a.  The DYLD variant by itself does not
# cause BUILDING_VARIANT to be defined, and object files are in DYLDOBJS.
#
VARIANTS = CANCELABLE DARWINEXTSN DYLD

.ifndef FEATURE_ONLY_64_BIT_INO_T
VARIANTS += INODE32
.endif
.ifndef FEATURE_ONLY_1050_VARIANTS
VARIANTS += PRE1050
.endif
.ifndef FEATURE_ONLY_UNIX_CONFORMANCE
VARIANTS+= LEGACY
.endif
# Append the 64-bit long double sources (ppc only)
.if (${MACHINE_ARCH} == ppc)
VARIANTS += LDBL
MDSRCS += ldbl64.s
.endif

CFLAGS_CANCELABLE= -DVARIANT_CANCELABLE
CFLAGS_DARWINEXTSN= -DVARIANT_DARWINEXTSN
CFLAGS_DYLD= -DVARIANT_DYLD
CFLAGS_INODE32= -U__DARWIN_64_BIT_INO_T -D__DARWIN_64_BIT_INO_T=0 -DVARIANT_INODE32
CFLAGS_LDBL= -mlong-double-64 -DLDBL_COMPAT
CFLAGS_LEGACY= -U__DARWIN_UNIX03 -D__DARWIN_UNIX03=0 -U__DARWIN_64_BIT_INO_T -D__DARWIN_64_BIT_INO_T=0 -DVARIANT_LEGACY
CFLAGS_PRE1050= -U__DARWIN_VERS_1050 -D__DARWIN_VERS_1050=0 -DVARIANT_PRE1050

# to insure a variable expansion of the left-hand side of a comparison
DYLD = DYLD

.for _v in ${VARIANTS}
COMBOARGS+= ${_v}/${CFLAGS_${_v}}
.endfor
.ifdef COMBOARGS
# makeCombos is a perl script that creates all the variant combinations
# and all the combinations of flags
VARIANTCOMBOCFLAGS != ${.CURDIR}/makeCombos ${COMBOARGS}
.endif
# For each of the variant combinations as target (and possibly suffixed with
# _D, _P, and _S for the four kinds on compile styles, we create a subdirectory
# to do the compiling in, and then call ${MYBSDMAKE} with the new directory, and
# setting VARIANTCFLAGS, which are the extra flags to be added to CFLAGS.
.for _v in ${VARIANTCOMBOCFLAGS}
VARIANTCOMBOS+= ${_v:H:S,/,,}
.if ${DYLD} != ${_v:H:S,/,,}
${_v:H:S,/,,}_BUILDING_VARIANT = -DBUILDING_VARIANT
.endif
${_v:H:S,/,,}:
.ifdef ${_v:H:S,/,,}SRCS
	${MKDIR} ${MAKEOBJDIR}/${_v:H:S,/,,}; \
	MAKEOBJDIR="${MAKEOBJDIR}/${_v:H:S,/,,}" VARIANTCFLAGS="-DBUILDING_VARIANT ${_v:T:S/@/ /g}" ${MYBSDMAKE} -C "${.CURDIR}" build_${_v:H:S,/,,}
.endif
${_v:H:S,/,,}_D:
.ifdef ${_v:H:S,/,,}SRCS
	${MKDIR} ${MAKEOBJDIR}/${_v:H:S,/,,}; \
	MAKEOBJDIR="${MAKEOBJDIR}/${_v:H:S,/,,}" VARIANTCFLAGS="-DBUILDING_VARIANT ${_v:T:S/@/ /g}" ${MYBSDMAKE} -C "${.CURDIR}" build_${_v:H:S,/,,}_D
.endif
${_v:H:S,/,,}_P:
.ifdef ${_v:H:S,/,,}SRCS
	${MKDIR} ${MAKEOBJDIR}/${_v:H:S,/,,}; \
	MAKEOBJDIR="${MAKEOBJDIR}/${_v:H:S,/,,}" VARIANTCFLAGS="-DBUILDING_VARIANT ${_v:T:S/@/ /g}" ${MYBSDMAKE} -C "${.CURDIR}" build_${_v:H:S,/,,}_P
.endif
${_v:H:S,/,,}_S:
.ifdef ${_v:H:S,/,,}SRCS
	${MKDIR} ${MAKEOBJDIR}/${_v:H:S,/,,}; \
	MAKEOBJDIR="${MAKEOBJDIR}/${_v:H:S,/,,}" VARIANTCFLAGS="${${_v:H:S,/,,}_BUILDING_VARIANT} ${_v:T:S/@/ /g}" ${MYBSDMAKE} -C "${.CURDIR}" build_${_v:H:S,/,,}_S
.endif
.endfor

# The non-DYLD variants
.for _v in ${VARIANTCOMBOS:N*DYLD*}
# Variant suffix rules so the filenames are unique and Libsystem won't complain
# because of ambiguities with -sectorder
.SUFFIXES: -${_v}.o -${_v}.do -${_v}.po -${_v}.So
.o-${_v}.o .do-${_v}.do .po-${_v}.po .So-${_v}.So:
	${MV} ${.IMPSRC} ${.TARGET}

# These are the build targets of the above ${MYBSDMAKE} calls, which just builds
# using the standard rules, but with the additional flags.
VARIANTOBJS+=  ${${_v}SRCS:N*.h:R:S/$/-${_v}.o/g:S,^,${_v}/,g}
build_${_v}:   ${${_v}SRCS:N*.h:R:S/$/-${_v}.o/g}
build_${_v}_D: ${${_v}SRCS:N*.h:R:S/$/-${_v}.do/g}
build_${_v}_P: ${${_v}SRCS:N*.h:R:S/$/-${_v}.po/g}
build_${_v}_S: ${${_v}SRCS:N*.h:R:S/$/-${_v}.So/g}
.endfor
# These variables, plus VARIANTOBJS above, are the extra binaries that get
# added to the .a files.  Note that these objects are in subdirectories
# of the main build directory.
VARIANTDOBJS+= ${VARIANTOBJS:.o=.do}
VARIANTPOBJS+= ${VARIANTOBJS:.o=.po}
VARIANTSOBJS+= ${VARIANTOBJS:.o=.So}

# Now for the DYLD variants
.for _v in ${VARIANTCOMBOS:M*DYLD*}
# Variant suffix rules so the filenames are unique and Libsystem won't complain
# because of ambiguities with -sectorder
.SUFFIXES: -${_v}.o -${_v}.do -${_v}.po -${_v}.So
.o-${_v}.o .do-${_v}.do .po-${_v}.po .So-${_v}.So:
	${MV} ${.IMPSRC} ${.TARGET}

# These are the build targets of the above ${MYBSDMAKE} calls, which just builds
# using the standard rules, but with the additional flags.
DYLDOBJS+=  ${${_v}SRCS:N*.h:R:S/$/-${_v}.So/g:S,^,${_v}/,g}
build_${_v}:
build_${_v}_D:
build_${_v}_P:
build_${_v}_S: ${${_v}SRCS:N*.h:R:S/$/-${_v}.So/g}
.endfor
#### FreeBSD Rules ##################################################
PREFBSDFLAGS= -I${.CURDIR}/fbsdcompat
FBSDFLAGS= -include _fbsd_compat_.h

-fbsd.c.o:
	${MYCC} -static \
	    ${PREFBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${FBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-fbsd.c.po:
	${MYCC} -pg -DPROFILE \
	    ${PREFBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${FBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-fbsd.c.So: 
	${MYCC} \
	    ${PREFBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${FBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-fbsd.c.do:
	${MYCC} -DDEBUG \
	    ${PREFBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${FBSDFLAGS} ${LIBCFLAGS} \
	    -c ${.IMPSRC} -o ${.TARGET}

#### NetBSD Rules ##################################################
PRENBSDFLAGS= -I${.CURDIR}/nbsdcompat
NBSDFLAGS= -include _nbsd_compat_.h

-nbsd.c.o:
	${MYCC} -static \
	    ${PRENBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${NBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-nbsd.c.po:
	${MYCC} -pg -DPROFILE \
	    ${PRENBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${NBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-nbsd.c.So: 
	${MYCC} \
	    ${PRENBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${NBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-nbsd.c.do:
	${MYCC} -DDEBUG \
	    ${PRENBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${NBSDFLAGS} ${LIBCFLAGS} \
	    -c ${.IMPSRC} -o ${.TARGET}

#### OpenBSD Rules ##################################################
PREOBSDFLAGS=
OBSDFLAGS=

-obsd.c.o:
	${MYCC} -static \
	    ${PREOBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${OBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-obsd.c.po:
	${MYCC} -pg -DPROFILE \
	    ${PREOBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${OBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-obsd.c.So: 
	${MYCC} \
	    ${PREOBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${OBSDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-obsd.c.do:
	${MYCC} -DDEBUG \
	    ${PREOBSDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${OBSDFLAGS} ${LIBCFLAGS} \
	    -c ${.IMPSRC} -o ${.TARGET}

#### UUID Rules ######################################################
PREUUIDFLAGS= -I${.CURDIR}/uuid
UUIDFLAGS= -include uuid-config.h

-uuid.c.o:
	${MYCC} -static \
	    ${PREUUIDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${UUIDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-uuid.c.po:
	${MYCC} -pg -DPROFILE \
	    ${PREUUIDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${UUIDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-uuid.c.So: 
	${MYCC} \
	    ${PREUUIDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${UUIDFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
-uuid.c.do:
	${MYCC} -DDEBUG \
	    ${PREUUIDFLAGS} ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${UUIDFLAGS} ${LIBCFLAGS} \
	    -c ${.IMPSRC} -o ${.TARGET}
.3-uuid.in.3:
	${SED} -f ${SRCROOT}/uuid/uuidman.sed ${.IMPSRC} > ${.TARGET}

#### Standard C Rules #################################################
# If you change any of these standard rule, make corresponding changes
# to the _STANDARD_* macros in Makefile.inc
#######################################################################
.c.o User.cUser.o Server.cServer.o:
	${MYCC} -static \
	    ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.c.po User.cUser.po Server.cServer.po:
	${MYCC} -pg -DPROFILE \
	    ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.c.So User.cUser.So Server.cServer.So: 
	${MYCC} \
	    ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${LIBCFLAGS} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.c.do User.cUser.do Server.cServer.do:
	${MYCC} -DDEBUG \
	    ${PRECFLAGS} ${PRECFLAGS-${.IMPSRC:T}} \
	    ${CFLAGS} ${CFLAGS-${.IMPSRC:T}} \
	    ${VARIANTCFLAGS} ${LIBCFLAGS} \
	    -c ${.IMPSRC} -o ${.TARGET}

#### Standard Assembler Rules #########################################
.s.o .S.o:
	${MYCC} -static -x assembler-with-cpp \
	    ${PRECFLAGS:M-[BIDFU]*} ${PRECFLAGS-${.IMPSRC:T}:M-[BIDFU]*} \
	    ${CFLAGS:M-[BIDFU]*} ${CFLAGS-${.IMPSRC:T}:M-[BIDFU]*} ${AINC} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.s.po .S.po:
	${MYCC} -pg -x assembler-with-cpp -DPROFILE \
	    ${PRECFLAGS:M-[BIDFU]*} ${PRECFLAGS-${.IMPSRC:T}:M-[BIDFU]*} \
	    ${CFLAGS:M-[BIDFU]*} ${CFLAGS-${.IMPSRC:T}:M-[BIDFU]*} ${AINC} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.s.So .S.So:
	${MYCC} -x assembler-with-cpp \
	    ${PRECFLAGS:M-[BIDFU]*} ${PRECFLAGS-${.IMPSRC:T}:M-[BIDFU]*} \
	    ${CFLAGS:M-[BIDFU]*} ${CFLAGS-${.IMPSRC:T}:M-[BIDFU]*} ${AINC} \
	    -Os ${OPTIMIZE-${.IMPSRC:T}} -c ${.IMPSRC} -o ${.TARGET}
.s.do .S.do:
	${MYCC} -x assembler-with-cpp -DDEBUG \
	    ${PRECFLAGS:M-[BIDFU]*} ${PRECFLAGS-${.IMPSRC:T}:M-[BIDFU]*} \
	    ${CFLAGS:M-[BIDFU]*} ${CFLAGS-${.IMPSRC:T}:M-[BIDFU]*} ${AINC} \
	    -c ${.IMPSRC} -o ${.TARGET}

#### mig Rules ########################################################
.defs.h .defsUser.c .defsServer.c:
	${MIG} -arch ${CCARCH} -cc ${MYCC} -user ${.PREFIX}User.c -server ${.PREFIX}Server.c -header ${.PREFIX}.h ${.IMPSRC}

gen_mig_defs: ${SRVMIGHDRS} ${MIGHDRS}
gen_md_mig_defs: ${MD_MIGHDRS}

#### Library Rules ####################################################
${VARIANTCOMBOS:N*DYLD*} ${OBJS} ${STATICOBJS}: ${SYMROOTINC}/${MACHINE_ARCH}/libc-features.h
lib${LIB}_static.a:: ${VARIANTCOMBOS:N*DYLD*} ${OBJS} ${STATICOBJS}
	@${ECHO} building static ${LIB} library
	@${RM} lib${LIB}_static.a
	@${AR} cq lib${LIB}_static.a `${LORDER} ${OBJS} ${STATICOBJS} ${VARIANTOBJS} | ${TSORT} -q`
	${RANLIB} lib${LIB}_static.a

${VARIANTCOMBOS:N*DYLD*:S/$/_P/g} ${POBJS}: ${SYMROOTINC}/${MACHINE_ARCH}/libc-features.h
lib${LIB}_profile.a:: ${VARIANTCOMBOS:N*DYLD*:S/$/_P/g} ${POBJS}
	@${ECHO} building profiled ${LIB} library
	@${RM} lib${LIB}_profile.a
	@${AR} cq lib${LIB}_profile.a `${LORDER} ${POBJS} ${VARIANTPOBJS} | ${TSORT} -q`
	${RANLIB} lib${LIB}_profile.a

${VARIANTCOMBOS:N*DYLD*:S/$/_D/g} ${DOBJS}: ${SYMROOTINC}/${MACHINE_ARCH}/libc-features.h
lib${LIB}_debug.a:: ${VARIANTCOMBOS:N*DYLD*:S/$/_D/g} ${DOBJS}
	@${ECHO} building debug ${LIB} library
	@${RM} lib${LIB}_debug.a
	@${AR} cq lib${LIB}_debug.a `${LORDER} ${DOBJS} ${VARIANTDOBJS} | ${TSORT} -q`
	${RANLIB} lib${LIB}_debug.a

${VARIANTCOMBOS:S/$/_S/g} ${SOBJS}: ${SYMROOTINC}/${MACHINE_ARCH}/libc-features.h
lib${LIB}.a:: ${VARIANTCOMBOS:S/$/_S/g} ${SOBJS}
	@${ECHO} building standard ${LIB} library
	@${RM} lib${LIB}.a
	@${AR} cq lib${LIB}.a `${LORDER} ${SOBJS} ${VARIANTSOBJS} | ${TSORT} -q`
	${RANLIB} lib${LIB}.a
	@${ECHO} building custom ${LIB} library for dyld
	@${RM} lib${LIB}-dyld.a
	@${AR} cq lib${LIB}-dyld.a `${LORDER} ${DYLDOBJS} | ${TSORT} -q`
	${RANLIB} lib${LIB}-dyld.a

CLEANFILES += ${DOBJS} libc_static.a libc_profile.a libc_debug.a

INCDIR = ${DESTDIR}/usr/include
LOCINCDIR = ${DESTDIR}/usr/local/include
SYSTEMFRAMEWORK = ${DESTDIR}/System/Library/Frameworks/System.framework
PRIVHDRS = ${SYSTEMFRAMEWORK}/Versions/B/PrivateHeaders
KERNELFRAMEWORK = ${DESTDIR}/System/Library/Frameworks/Kernel.framework
PRIVKERNELHDRS = ${KERNELFRAMEWORK}/Versions/A/PrivateHeaders
INSTALLMODE != ${TEST} `id -u` -eq 0 && ${ECHO} 444 || ${ECHO} 644

installhdrs-md: gen_md_mig_defs

installhdrs: modifyhdrs

copyhdrs: gen_mig_defs
	${MKDIR} ${INCDIR}/arpa
	${MKDIR} ${INCDIR}/libkern
	${MKDIR} ${INCDIR}/malloc
.ifdef OBJC_INSTHDRS
	${MKDIR} ${INCDIR}/objc
.endif
	${MKDIR} ${INCDIR}/protocols
	${MKDIR} ${INCDIR}/secure
	${MKDIR} ${INCDIR}/sys
	${MKDIR} ${INCDIR}/xlocale
	${INSTALL} -m ${INSTALLMODE} ${INSTHDRS} ${INCDIR}
	${INSTALL} -m ${INSTALLMODE} ${ARPA_INSTHDRS} ${INCDIR}/arpa
	${INSTALL} -m ${INSTALLMODE} ${LIBKERN_INSTHDRS} ${INCDIR}/libkern
	${INSTALL} -m ${INSTALLMODE} ${MALLOC_INSTHDRS} ${INCDIR}/malloc
.ifdef OBJC_INSTHDRS
	${INSTALL} -m ${INSTALLMODE} ${OBJC_INSTHDRS} ${INCDIR}/objc
.endif
	${INSTALL} -m ${INSTALLMODE} ${PROTO_INSTHDRS} ${INCDIR}/protocols
	${INSTALL} -m ${INSTALLMODE} ${SECURE_INSTHDRS} ${INCDIR}/secure
	${INSTALL} -m ${INSTALLMODE} ${SYS_INSTHDRS} ${INCDIR}/sys
	${INSTALL} -m ${INSTALLMODE} ${XLOCALE_INSTHDRS} ${INCDIR}/xlocale
	${MKDIR} ${LOCINCDIR}
	${INSTALL} -m ${INSTALLMODE} ${LOCALHDRS} ${LOCINCDIR}
	${MKDIR} ${PRIVHDRS}/btree
	${MKDIR} ${PRIVHDRS}/machine
	${MKDIR} ${PRIVHDRS}/objc
	${MKDIR} ${PRIVHDRS}/uuid
	${MKDIR} ${PRIVHDRS}/sys
	${MKDIR} ${PRIVKERNELHDRS}/uuid
	${INSTALL} -m ${INSTALLMODE} ${PRIV_INSTHDRS} ${PRIVHDRS}
	${INSTALL} -m ${INSTALLMODE} ${INSTBTREEPRIVHDRS_AUTOPATCH} ${PRIVHDRS}/btree
	${INSTALL} -m ${INSTALLMODE} ${SRCROOT}/internat/NXCType.h ${PRIVHDRS}/objc
	${MV} ${DESTDIR}/usr/include/asm.h ${PRIVHDRS}/machine
	${INSTALL} -m ${INSTALLMODE} ${SYS_INSTHDRS} ${PRIVHDRS}/sys
	${INSTALL} -m ${INSTALLMODE} ${PRIVUUID_INSTHDRS} ${PRIVHDRS}/uuid
	${INSTALL} -m ${INSTALLMODE} ${PRIVUUID_INSTHDRS} ${PRIVKERNELHDRS}/uuid

modifyhdrs: copyhdrs
	@for i in `${FIND} '${DESTDIR}' -name \*.h -print0 | ${XARGS} -0 ${GREP} -l '^//Begin-Libc'`; do \
	    ${CHMOD} u+w $$i && \
	    ${ECHO} ${ED} - $$i \< ${.CURDIR}/strip-header.ed && \
	    ${ED} - $$i < ${.CURDIR}/strip-header.ed && \
	    ${CHMOD} u-w $$i || exit 1; \
	done
	@for i in `${FIND} '${DESTDIR}' -name \*.h -print0 | ${XARGS} -0 ${FGREP} -l UNIFDEF`; do \
	    ${CHMOD} u+w $$i && \
	    ${CP} $$i $$i.orig && \
	    ${ECHO} ${UNIFDEF} ${UNIFDEFARGS} $$i.orig \> $$i && \
	    { ${UNIFDEF} ${UNIFDEFARGS} $$i.orig > $$i || [ $$? -ne 2 ]; } && \
	    ${RM} $$i.orig && \
	    ${CHMOD} u-w $$i || exit 1; \
	done

install_lib${LIB}_static.a:
	${INSTALL} -m ${INSTALLMODE} lib${LIB}_static.a ${DESTDIR}/usr/local/lib/system/
install_lib${LIB}_profile.a:
	${INSTALL} -m ${INSTALLMODE} lib${LIB}_profile.a ${DESTDIR}/usr/local/lib/system
install_lib${LIB}_debug.a:
	${INSTALL} -m ${INSTALLMODE} lib${LIB}_debug.a ${DESTDIR}/usr/local/lib/system/
install_lib${LIB}.a:
	${INSTALL} -m ${INSTALLMODE} lib${LIB}.a ${DESTDIR}/usr/local/lib/system/

autopatch: ${AUTOPATCHHDRS} ${AUTOPATCHSRCS} ${AUTOPATCHMAN}

copyfiles:
.if !empty(COPYFILES)
	${INSTALL} -m ${INSTALLMODE} ${COPYFILES} ${DESTDIR}/usr/local/lib/system
.endif
.if !empty(MDCOPYFILES)
	${INSTALL} -m ${INSTALLMODE} ${MDCOPYFILES} ${DESTDIR}/usr/local/lib/system
.endif

clean:
	${RM} ${OBJS} ${POBJS} ${DOBJS} ${SOBJS} ${CLEANFILES}
	${RM} lib${LIB}.a lib${LIB}_static.a lib${LIB}_profile.a \
		lib${LIB}_debug.a 

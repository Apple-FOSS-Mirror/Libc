--- system.c.bsdnew	2009-11-13 14:11:52.000000000 -0800
+++ system.c	2009-11-13 14:11:52.000000000 -0800
@@ -40,23 +40,61 @@ __FBSDID("$FreeBSD: src/lib/libc/stdlib/
 #include <stdlib.h>
 #include <stddef.h>
 #include <unistd.h>
+#include <spawn.h>
 #include <paths.h>
 #include <errno.h>
 #include "un-namespace.h"
 #include "libc_private.h"
 
+#include <crt_externs.h>
+#define environ (*_NSGetEnviron())
+
+#if __DARWIN_UNIX03
+#include <pthread.h>
+
+static pthread_mutex_t __systemfn_mutex = PTHREAD_MUTEX_INITIALIZER;
+extern int __unix_conforming;
+#ifdef VARIANT_CANCELABLE
+extern void _pthread_testcancel(pthread_t thread, int isconforming);
+#endif /* VARIANT_CANCELABLE */
+#endif /* __DARWIN_UNIX03 */
+
 int
 __system(command)
 	const char *command;
 {
 	pid_t pid, savedpid;
-	int pstat;
+	int pstat, err;
 	struct sigaction ign, intact, quitact;
-	sigset_t newsigblock, oldsigblock;
+	sigset_t newsigblock, oldsigblock, defaultsig;
+	posix_spawnattr_t attr;
+	short flags = POSIX_SPAWN_SETSIGMASK;
+	const char *argv[] = {"sh", "-c", command, NULL};
+
+#if __DARWIN_UNIX03
+	if (__unix_conforming == 0)
+		__unix_conforming = 1;
+#ifdef VARIANT_CANCELABLE
+	_pthread_testcancel(pthread_self(), 1);
+#endif /* VARIANT_CANCELABLE */
+#endif /* __DARWIN_UNIX03 */
+
+	if (!command) {		/* just checking... */
+		if (access(_PATH_BSHELL, F_OK) == -1)	/* if no sh or no access */
+			return(0);
+		else
+			return(1);
+	}
 
-	if (!command)		/* just checking... */
-		return(1);
+	if ((err = posix_spawnattr_init(&attr)) != 0) {
+		errno = err;
+		return -1;
+	}
+	(void)sigemptyset(&defaultsig);
 
+#if __DARWIN_UNIX03
+	pthread_mutex_lock(&__systemfn_mutex);
+#endif /* __DARWIN_UNIX03 */
 	/*
 	 * Ignore SIGINT and SIGQUIT, block SIGCHLD. Remember to save
 	 * existing signal dispositions.
@@ -65,33 +103,45 @@ __system(command)
 	(void)sigemptyset(&ign.sa_mask);
 	ign.sa_flags = 0;
 	(void)_sigaction(SIGINT, &ign, &intact);
+	if (intact.sa_handler != SIG_IGN) {
+		sigaddset(&defaultsig, SIGINT);
+		flags |= POSIX_SPAWN_SETSIGDEF;
+	}
 	(void)_sigaction(SIGQUIT, &ign, &quitact);
+	if (quitact.sa_handler != SIG_IGN) {
+		sigaddset(&defaultsig, SIGQUIT);
+		flags |= POSIX_SPAWN_SETSIGDEF;
+	}
 	(void)sigemptyset(&newsigblock);
 	(void)sigaddset(&newsigblock, SIGCHLD);
 	(void)_sigprocmask(SIG_BLOCK, &newsigblock, &oldsigblock);
-	switch(pid = fork()) {
-	case -1:			/* error */
-		break;
-	case 0:				/* child */
-		/*
-		 * Restore original signal dispositions and exec the command.
-		 */
-		(void)_sigaction(SIGINT, &intact, NULL);
-		(void)_sigaction(SIGQUIT,  &quitact, NULL);
-		(void)_sigprocmask(SIG_SETMASK, &oldsigblock, NULL);
-		execl(_PATH_BSHELL, "sh", "-c", command, (char *)NULL);
-		_exit(127);
-	default:			/* parent */
+	(void)posix_spawnattr_setsigmask(&attr, &oldsigblock);
+	if (flags & POSIX_SPAWN_SETSIGDEF) {
+		(void)posix_spawnattr_setsigdefault(&attr, &defaultsig);
+	}
+	(void)posix_spawnattr_setflags(&attr, flags);
+
+	err = posix_spawn(&pid, _PATH_BSHELL, NULL, &attr, (char *const *)argv, environ);
+	(void)posix_spawnattr_destroy(&attr);
+	if (err == 0) {
 		savedpid = pid;
 		do {
 			pid = _wait4(savedpid, &pstat, 0, (struct rusage *)0);
 		} while (pid == -1 && errno == EINTR);
-		break;
+		if (pid == -1) pstat = -1;
+	} else if (err == ENOMEM || err == EAGAIN) { /* as if fork failed */
+		pstat = -1;
+	} else {
+		pstat = W_EXITCODE(127, 0); /* couldn't exec shell */
 	}
+
 	(void)_sigaction(SIGINT, &intact, NULL);
 	(void)_sigaction(SIGQUIT,  &quitact, NULL);
 	(void)_sigprocmask(SIG_SETMASK, &oldsigblock, NULL);
-	return(pid == -1 ? -1 : pstat);
+#if __DARWIN_UNIX03
+	pthread_mutex_unlock(&__systemfn_mutex);
+#endif /* __DARWIN_UNIX03 */
+	return(pstat);
 }
 
 __weak_reference(__system, system);

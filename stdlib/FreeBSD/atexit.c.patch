--- atexit.c.orig	2008-02-01 22:43:20.000000000 -0800
+++ atexit.c	2008-02-01 22:47:49.000000000 -0800
@@ -45,6 +45,9 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <pthread.h>
+#if defined(__DYNAMIC__)
+#include <dlfcn.h>
+#endif /* defined(__DYNAMIC__) */
 #include "atexit.h"
 #include "un-namespace.h"
 
@@ -74,6 +77,7 @@
 };
 
 static struct atexit *__atexit;		/* points to head of LIFO stack */
+static int new_registration;
 
 /*
  * Register the function described by 'fptr' to be called at application
@@ -109,6 +113,7 @@
 		__atexit = p;
 	}
 	p->fns[p->ind++] = *fptr;
+	new_registration = 1;
 	_MUTEX_UNLOCK(&atexit_mutex);
 	return 0;
 }
@@ -120,12 +125,20 @@
 atexit(void (*func)(void))
 {
 	struct atexit_fn fn;
+	struct dl_info info;
 	int error;
 
 	fn.fn_type = ATEXIT_FN_STD;
 	fn.fn_ptr.std_func = func;;
 	fn.fn_arg = NULL;
+#if defined(__DYNAMIC__)
+	if ( dladdr(func, &info) )
+		fn.fn_dso = info.dli_fbase;
+	else 
+		fn.fn_dso = NULL;
+#else /* ! defined(__DYNAMIC__) */
 	fn.fn_dso = NULL;
+#endif /* defined(__DYNAMIC__) */
 
  	error = atexit_register(&fn);	
 	return (error);
@@ -156,13 +169,14 @@
  * handlers are called.
  */
 void
-__cxa_finalize(void *dso)
+__cxa_finalize(const void *dso)
 {
 	struct atexit *p;
 	struct atexit_fn fn;
 	int n;
 
 	_MUTEX_LOCK(&atexit_mutex);
+restart:
 	for (p = __atexit; p; p = p->next) {
 		for (n = p->ind; --n >= 0;) {
 			if (p->fns[n].fn_type == ATEXIT_FN_EMPTY)
@@ -175,6 +189,7 @@
 			  has already been called.
 			*/
 			p->fns[n].fn_type = ATEXIT_FN_EMPTY;
+			new_registration = 0;
 		        _MUTEX_UNLOCK(&atexit_mutex);
 		
 			/* Call the function of correct type. */
@@ -183,6 +198,8 @@
 			else if (fn.fn_type == ATEXIT_FN_STD)
 				fn.fn_ptr.std_func();
 			_MUTEX_LOCK(&atexit_mutex);
+			if (new_registration)
+			    goto restart;
 		}
 	}
 	_MUTEX_UNLOCK(&atexit_mutex);

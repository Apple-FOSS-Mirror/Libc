--- atexit.c.bsdnew	2009-11-13 14:11:47.000000000 -0800
+++ atexit.c	2009-11-13 14:11:47.000000000 -0800
@@ -41,14 +41,23 @@ __FBSDID("$FreeBSD: src/lib/libc/stdlib/
 #include <stdlib.h>
 #include <unistd.h>
 #include <pthread.h>
+#if defined(__DYNAMIC__) || defined (__BLOCKS__)
+#include <dlfcn.h>
+#endif /* defined(__DYNAMIC__) */
 #include "atexit.h"
 #include "un-namespace.h"
 
+#ifdef __BLOCKS__
+#include <Block.h>
+#endif /* __BLOCKS__ */
 #include "libc_private.h"
 
 #define	ATEXIT_FN_EMPTY	0
 #define	ATEXIT_FN_STD	1
 #define	ATEXIT_FN_CXA	2
+#ifdef __BLOCKS__
+#define	ATEXIT_FN_BLK	3
+#endif /* __BLOCKS__ */
 
 static pthread_mutex_t atexit_mutex = PTHREAD_MUTEX_INITIALIZER;
 
@@ -63,6 +72,9 @@ struct atexit {
 		union {
 			void (*std_func)(void);
 			void (*cxa_func)(void *);
+#ifdef __BLOCKS__
+			void (^block)(void);
+#endif /* __BLOCKS__ */
 		} fn_ptr;			/* function pointer */
 		void *fn_arg;			/* argument for CXA callback */
 		void *fn_dso;			/* shared module handle */
@@ -70,6 +82,7 @@ struct atexit {
 };
 
 static struct atexit *__atexit;		/* points to head of LIFO stack */
+static int new_registration;
 
 /*
  * Register the function described by 'fptr' to be called at application
@@ -105,6 +118,7 @@ atexit_register(struct atexit_fn *fptr)
 		__atexit = p;
 	}
 	p->fns[p->ind++] = *fptr;
+	new_registration = 1;
 	_MUTEX_UNLOCK(&atexit_mutex);
 	return 0;
 }
@@ -116,17 +130,50 @@ int
 atexit(void (*func)(void))
 {
 	struct atexit_fn fn;
+	struct dl_info info;
 	int error;
 
 	fn.fn_type = ATEXIT_FN_STD;
-	fn.fn_ptr.std_func = func;;
+	fn.fn_ptr.std_func = func;
 	fn.fn_arg = NULL;
+#if defined(__DYNAMIC__)
+	if ( dladdr(func, &info) )
+		fn.fn_dso = info.dli_fbase;
+	else 
+		fn.fn_dso = NULL;
+#else /* ! defined(__DYNAMIC__) */
 	fn.fn_dso = NULL;
+#endif /* defined(__DYNAMIC__) */
 
  	error = atexit_register(&fn);	
 	return (error);
 }
 
+#ifdef __BLOCKS__
+int
+atexit_b(void (^block)(void))
+{
+	struct atexit_fn fn;
+	struct dl_info info;
+	int error;
+
+	fn.fn_type = ATEXIT_FN_BLK;
+	fn.fn_ptr.block = Block_copy(block);
+	fn.fn_arg = NULL;
+#if defined(__DYNAMIC__)
+	if ( dladdr(block, &info) )
+		fn.fn_dso = info.dli_fbase;
+	else 
+		fn.fn_dso = NULL;
+#else /* ! defined(__DYNAMIC__) */
+	fn.fn_dso = NULL;
+#endif /* defined(__DYNAMIC__) */
+
+ 	error = atexit_register(&fn);	
+	return (error);
+}
+#endif /* __BLOCKS__ */
+
 /*
  * Register a function to be performed at exit or when an shared object
  * with given dso handle is unloaded dynamically.
@@ -152,13 +199,14 @@ __cxa_atexit(void (*func)(void *), void 
  * handlers are called.
  */
 void
-__cxa_finalize(void *dso)
+__cxa_finalize(const void *dso)
 {
 	struct atexit *p;
 	struct atexit_fn fn;
 	int n;
 
 	_MUTEX_LOCK(&atexit_mutex);
+restart:
 	for (p = __atexit; p; p = p->next) {
 		for (n = p->ind; --n >= 0;) {
 			if (p->fns[n].fn_type == ATEXIT_FN_EMPTY)
@@ -171,6 +219,7 @@ __cxa_finalize(void *dso)
 			  has already been called.
 			*/
 			p->fns[n].fn_type = ATEXIT_FN_EMPTY;
+			new_registration = 0;
 		        _MUTEX_UNLOCK(&atexit_mutex);
 		
 			/* Call the function of correct type. */
@@ -178,7 +227,13 @@ __cxa_finalize(void *dso)
 				fn.fn_ptr.cxa_func(fn.fn_arg);
 			else if (fn.fn_type == ATEXIT_FN_STD)
 				fn.fn_ptr.std_func();
+#ifdef __BLOCKS__
+			else if (fn.fn_type == ATEXIT_FN_BLK)
+				fn.fn_ptr.block();
+#endif /* __BLOCKS__ */
 			_MUTEX_LOCK(&atexit_mutex);
+			if (new_registration)
+			    goto restart;
 		}
 	}
 	_MUTEX_UNLOCK(&atexit_mutex);

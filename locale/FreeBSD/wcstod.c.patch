--- wcstod.c.orig	Thu Nov 25 11:38:20 2004
+++ wcstod.c	Fri Feb 18 14:45:42 2005
@@ -27,6 +27,8 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/locale/wcstod.c,v 1.4 2004/04/07 09:47:56 tjr Exp $");
 
+#include "xlocale_private.h"
+
 #include <stdlib.h>
 #include <wchar.h>
 #include <wctype.h>
@@ -41,7 +43,8 @@
  * for at least the digits, radix character and letters.
  */
 double
-wcstod(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr)
+wcstod_l(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr,
+    locale_t loc)
 {
 	static const mbstate_t initial;
 	mbstate_t mbs;
@@ -50,7 +53,8 @@
 	const wchar_t *wcp;
 	size_t len;
 
-	while (iswspace(*nptr))
+	NORMALIZE_LOCALE(loc);
+	while (iswspace_l(*nptr, loc))
 		nptr++;
 
 	/*
@@ -65,7 +69,7 @@
 	 */
 	wcp = nptr;
 	mbs = initial;
-	if ((len = wcsrtombs(NULL, &wcp, 0, &mbs)) == (size_t)-1) {
+	if ((len = wcsrtombs_l(NULL, &wcp, 0, &mbs, loc)) == (size_t)-1) {
 		if (endptr != NULL)
 			*endptr = (wchar_t *)nptr;
 		return (0.0);
@@ -73,10 +77,10 @@
 	if ((buf = malloc(len + 1)) == NULL)
 		return (0.0);
 	mbs = initial;
-	wcsrtombs(buf, &wcp, len + 1, &mbs);
+	wcsrtombs_l(buf, &wcp, len + 1, &mbs, loc);
 
 	/* Let strtod() do most of the work for us. */
-	val = strtod(buf, &end);
+	val = strtod_l(buf, &end, loc);
 
 	/*
 	 * We only know where the number ended in the _multibyte_
@@ -91,4 +95,10 @@
 	free(buf);
 
 	return (val);
+}
+
+double
+wcstod(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr)
+{
+	return wcstod_l(nptr, endptr, __current_locale());
 }

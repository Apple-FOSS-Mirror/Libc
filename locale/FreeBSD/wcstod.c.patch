--- wcstod.c.orig	2007-03-16 01:15:20.000000000 -0700
+++ wcstod.c	2007-03-16 03:03:41.000000000 -0700
@@ -27,9 +27,12 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/locale/wcstod.c,v 1.4 2004/04/07 09:47:56 tjr Exp $");
 
+#include "xlocale_private.h"
+
 #include <stdlib.h>
 #include <wchar.h>
 #include <wctype.h>
+#include <_simple.h>
 
 /*
  * Convert a string to a double-precision number.
@@ -41,42 +44,43 @@
  * for at least the digits, radix character and letters.
  */
 double
-wcstod(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr)
+wcstod_l(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr,
+    locale_t loc)
 {
 	static const mbstate_t initial;
 	mbstate_t mbs;
 	double val;
 	char *buf, *end;
-	const wchar_t *wcp;
 	size_t len;
+	locale_t ctype;
+	_SIMPLE_STRING b;
+	char mb[MB_CUR_MAX + 1];
+	const wchar_t *nptr0 = nptr;
+	const wchar_t *first;
 
-	while (iswspace(*nptr))
+	NORMALIZE_LOCALE(loc);
+	ctype = __numeric_ctype(loc);
+
+	while (iswspace_l(*nptr, ctype))
 		nptr++;
 
-	/*
-	 * Convert the supplied numeric wide char. string to multibyte.
-	 *
-	 * We could attempt to find the end of the numeric portion of the
-	 * wide char. string to avoid converting unneeded characters but
-	 * choose not to bother; optimising the uncommon case where
-	 * the input string contains a lot of text after the number
-	 * duplicates a lot of strtod()'s functionality and slows down the
-	 * most common cases.
-	 */
-	wcp = nptr;
-	mbs = initial;
-	if ((len = wcsrtombs(NULL, &wcp, 0, &mbs)) == (size_t)-1) {
-		if (endptr != NULL)
-			*endptr = (wchar_t *)nptr;
-		return (0.0);
-	}
-	if ((buf = malloc(len + 1)) == NULL)
+	if ((b = _simple_salloc()) == NULL)
 		return (0.0);
+
+	first = nptr;
 	mbs = initial;
-	wcsrtombs(buf, &wcp, len + 1, &mbs);
+	while (*nptr && (len = wcrtomb_l(mb, *nptr, &mbs, ctype)) != (size_t)-1) {
+		mb[len] = 0;
+		if (_simple_sappend(b, mb) < 0) { /* no memory */
+			_simple_sfree(b);
+			return (0.0);
+		}
+		nptr++;
+	}
 
 	/* Let strtod() do most of the work for us. */
-	val = strtod(buf, &end);
+	buf = _simple_string(b);
+	val = strtod_l(buf, &end, loc);
 
 	/*
 	 * We only know where the number ended in the _multibyte_
@@ -86,9 +90,15 @@
 	 */
 	if (endptr != NULL)
 		/* XXX Assume each wide char is one byte. */
-		*endptr = (wchar_t *)nptr + (end - buf);
+		*endptr = (end == buf) ? (wchar_t *)nptr0 : ((wchar_t *)first + (end - buf));
 
-	free(buf);
+	_simple_sfree(b);
 
 	return (val);
 }
+
+double
+wcstod(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr)
+{
+	return wcstod_l(nptr, endptr, __current_locale());
+}

--- utf2.c.bsdnew	2009-11-09 17:38:09.000000000 -0800
+++ utf2.c	2009-11-09 17:41:17.000000000 -0800
@@ -27,6 +27,8 @@
 #include <sys/param.h>
 __FBSDID("$FreeBSD: src/lib/libc/locale/utf8.c,v 1.16 2007/10/15 09:51:30 ache Exp $");
 
+#include "xlocale_private.h"
+
 #include <errno.h>
 #include <limits.h>
 #include <runetype.h>
@@ -35,62 +37,61 @@ __FBSDID("$FreeBSD: src/lib/libc/locale/
 #include <wchar.h>
 #include "mblocal.h"
 
-extern int __mb_sb_limit;
+#define UTF2_MB_CUR_MAX		3
 
-static size_t	_UTF8_mbrtowc(wchar_t * __restrict, const char * __restrict,
-		    size_t, mbstate_t * __restrict);
-static int	_UTF8_mbsinit(const mbstate_t *);
-static size_t	_UTF8_mbsnrtowcs(wchar_t * __restrict,
+static size_t	_UTF2_mbrtowc(wchar_t * __restrict, const char * __restrict,
+		    size_t, mbstate_t * __restrict, locale_t);
+static int	_UTF2_mbsinit(const mbstate_t *, locale_t);
+static size_t	_UTF2_mbsnrtowcs(wchar_t * __restrict,
 		    const char ** __restrict, size_t, size_t,
-		    mbstate_t * __restrict);
-static size_t	_UTF8_wcrtomb(char * __restrict, wchar_t,
-		    mbstate_t * __restrict);
-static size_t	_UTF8_wcsnrtombs(char * __restrict, const wchar_t ** __restrict,
-		    size_t, size_t, mbstate_t * __restrict);
+		    mbstate_t * __restrict, locale_t);
+static size_t	_UTF2_wcrtomb(char * __restrict, wchar_t,
+		    mbstate_t * __restrict, locale_t);
+static size_t	_UTF2_wcsnrtombs(char * __restrict, const wchar_t ** __restrict,
+		    size_t, size_t, mbstate_t * __restrict, locale_t);
 
 typedef struct {
 	wchar_t	ch;
 	int	want;
 	wchar_t	lbound;
-} _UTF8State;
+} _UTF2State;
 
-int
-_UTF8_init(_RuneLocale *rl)
+__private_extern__ int
+_UTF2_init(struct __xlocale_st_runelocale *xrl)
 {
 
-	__mbrtowc = _UTF8_mbrtowc;
-	__wcrtomb = _UTF8_wcrtomb;
-	__mbsinit = _UTF8_mbsinit;
-	__mbsnrtowcs = _UTF8_mbsnrtowcs;
-	__wcsnrtombs = _UTF8_wcsnrtombs;
-	_CurrentRuneLocale = rl;
-	__mb_cur_max = 6;
+	xrl->__mbrtowc = _UTF2_mbrtowc;
+	xrl->__wcrtomb = _UTF2_wcrtomb;
+	xrl->__mbsinit = _UTF2_mbsinit;
+	xrl->__mbsnrtowcs = _UTF2_mbsnrtowcs;
+	xrl->__wcsnrtombs = _UTF2_wcsnrtombs;
+	xrl->__mb_cur_max = UTF2_MB_CUR_MAX;
 	/*
 	 * UCS-4 encoding used as the internal representation, so
 	 * slots 0x0080-0x00FF are occuped and must be excluded
 	 * from the single byte ctype by setting the limit.
 	 */
-	__mb_sb_limit = 128;
+	xrl->__mb_sb_limit = 128;
 
 	return (0);
 }
 
 static int
-_UTF8_mbsinit(const mbstate_t *ps)
+_UTF2_mbsinit(const mbstate_t *ps, locale_t loc)
 {
 
-	return (ps == NULL || ((const _UTF8State *)ps)->want == 0);
+	return (ps == NULL || ((const _UTF2State *)ps)->want == 0);
 }
 
 static size_t
-_UTF8_mbrtowc(wchar_t * __restrict pwc, const char * __restrict s, size_t n,
-    mbstate_t * __restrict ps)
+_UTF2_mbrtowc(wchar_t * __restrict pwc, const char * __restrict s, size_t n,
+    mbstate_t * __restrict ps, locale_t loc)
 {
-	_UTF8State *us;
+	_UTF2State *us;
 	int ch, i, mask, want;
 	wchar_t lbound, wch;
 
-	us = (_UTF8State *)ps;
+	us = (_UTF2State *)ps;
 
 	if (us->want < 0 || us->want > 6) {
 		errno = EINVAL;
@@ -140,21 +141,9 @@ _UTF8_mbrtowc(wchar_t * __restrict pwc, 
 			mask = 0x0f;
 			want = 3;
 			lbound = 0x800;
-		} else if ((ch & 0xf8) == 0xf0) {
-			mask = 0x07;
-			want = 4;
-			lbound = 0x10000;
-		} else if ((ch & 0xfc) == 0xf8) {
-			mask = 0x03;
-			want = 5;
-			lbound = 0x200000;
-		} else if ((ch & 0xfe) == 0xfc) {
-			mask = 0x01;
-			want = 6;
-			lbound = 0x4000000;
 		} else {
 			/*
-			 * Malformed input; input is not UTF-8.
+			 * Malformed input; input is not UTF2.
 			 */
 			errno = EILSEQ;
 			return ((size_t)-1);
@@ -205,16 +194,16 @@ _UTF8_mbrtowc(wchar_t * __restrict pwc, 
 }
 
 static size_t
-_UTF8_mbsnrtowcs(wchar_t * __restrict dst, const char ** __restrict src,
-    size_t nms, size_t len, mbstate_t * __restrict ps)
+_UTF2_mbsnrtowcs(wchar_t * __restrict dst, const char ** __restrict src,
+    size_t nms, size_t len, mbstate_t * __restrict ps, locale_t loc)
 {
-	_UTF8State *us;
+	_UTF2State *us;
 	const char *s;
 	size_t nchr;
 	wchar_t wc;
 	size_t nb;
 
-	us = (_UTF8State *)ps;
+	us = (_UTF2State *)ps;
 
 	s = *src;
 	nchr = 0;
@@ -236,7 +225,7 @@ _UTF8_mbsnrtowcs(wchar_t * __restrict ds
 				 * excluding NUL.
 				 */
 				nb = 1;
-			else if ((nb = _UTF8_mbrtowc(&wc, s, nms, ps)) ==
+			else if ((nb = _UTF2_mbrtowc(&wc, s, nms, ps, loc)) ==
 			    (size_t)-1)
 				/* Invalid sequence - mbrtowc() sets errno. */
 				return ((size_t)-1);
@@ -266,7 +255,7 @@ _UTF8_mbsnrtowcs(wchar_t * __restrict ds
 			 */
 			*dst = (wchar_t)*s;
 			nb = 1;
-		} else if ((nb = _UTF8_mbrtowc(dst, s, nms, ps)) ==
+		} else if ((nb = _UTF2_mbrtowc(dst, s, nms, ps, loc)) ==
 		    (size_t)-1) {
 			*src = s;
 			return ((size_t)-1);
@@ -287,13 +276,13 @@ _UTF8_mbsnrtowcs(wchar_t * __restrict ds
 }
 
 static size_t
-_UTF8_wcrtomb(char * __restrict s, wchar_t wc, mbstate_t * __restrict ps)
+_UTF2_wcrtomb(char * __restrict s, wchar_t wc, mbstate_t * __restrict ps, locale_t loc)
 {
-	_UTF8State *us;
+	_UTF2State *us;
 	unsigned char lead;
 	int i, len;
 
-	us = (_UTF8State *)ps;
+	us = (_UTF2State *)ps;
 
 	if (us->want != 0) {
 		errno = EINVAL;
@@ -325,15 +314,6 @@ _UTF8_wcrtomb(char * __restrict s, wchar
 	} else if ((wc & ~0xffff) == 0) {
 		lead = 0xe0;
 		len = 3;
-	} else if ((wc & ~0x1fffff) == 0) {
-		lead = 0xf0;
-		len = 4;
-	} else if ((wc & ~0x3ffffff) == 0) {
-		lead = 0xf8;
-		len = 5;
-	} else if ((wc & ~0x7fffffff) == 0) {
-		lead = 0xfc;
-		len = 6;
 	} else {
 		errno = EILSEQ;
 		return ((size_t)-1);
@@ -355,16 +335,16 @@ _UTF8_wcrtomb(char * __restrict s, wchar
 }
 
 static size_t
-_UTF8_wcsnrtombs(char * __restrict dst, const wchar_t ** __restrict src,
-    size_t nwc, size_t len, mbstate_t * __restrict ps)
+_UTF2_wcsnrtombs(char * __restrict dst, const wchar_t ** __restrict src,
+    size_t nwc, size_t len, mbstate_t * __restrict ps, locale_t loc)
 {
-	_UTF8State *us;
+	_UTF2State *us;
 	char buf[MB_LEN_MAX];
 	const wchar_t *s;
 	size_t nbytes;
 	size_t nb;
 
-	us = (_UTF8State *)ps;
+	us = (_UTF2State *)ps;
 
 	if (us->want != 0) {
 		errno = EINVAL;
@@ -379,7 +359,7 @@ _UTF8_wcsnrtombs(char * __restrict dst, 
 			if (0 <= *s && *s < 0x80)
 				/* Fast path for plain ASCII characters. */
 				nb = 1;
-			else if ((nb = _UTF8_wcrtomb(buf, *s, ps)) ==
+			else if ((nb = _UTF2_wcrtomb(buf, *s, ps, loc)) ==
 			    (size_t)-1)
 				/* Invalid character - wcrtomb() sets errno. */
 				return ((size_t)-1);
@@ -396,9 +376,9 @@ _UTF8_wcsnrtombs(char * __restrict dst, 
 			/* Fast path for plain ASCII characters. */
 			nb = 1;
 			*dst = *s;
-		} else if (len > (size_t)MB_CUR_MAX) {
+		} else if (len > (size_t)UTF2_MB_CUR_MAX) {
 			/* Enough space to translate in-place. */
-			if ((nb = _UTF8_wcrtomb(dst, *s, ps)) == (size_t)-1) {
+			if ((nb = _UTF2_wcrtomb(dst, *s, ps, loc)) == (size_t)-1) {
 				*src = s;
 				return ((size_t)-1);
 			}
@@ -406,7 +386,7 @@ _UTF8_wcsnrtombs(char * __restrict dst, 
 			/*
 			 * May not be enough space; use temp. buffer.
 			 */
-			if ((nb = _UTF8_wcrtomb(buf, *s, ps)) == (size_t)-1) {
+			if ((nb = _UTF2_wcrtomb(buf, *s, ps, loc)) == (size_t)-1) {
 				*src = s;
 				return ((size_t)-1);
 			}

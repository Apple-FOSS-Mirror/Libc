--- wcstoul.c.orig	2009-11-09 15:05:25.000000000 -0800
+++ wcstoul.c	2009-11-09 15:05:26.000000000 -0800
@@ -30,6 +30,8 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/locale/wcstoul.c,v 1.2 2007/01/09 00:28:01 imp Exp $");
 
+#include "xlocale_private.h"
+
 #include <ctype.h>
 #include <errno.h>
 #include <limits.h>
@@ -40,7 +42,8 @@ __FBSDID("$FreeBSD: src/lib/libc/locale/
  * Convert a wide character string to an unsigned long integer.
  */
 unsigned long
-wcstoul(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr, int base)
+wcstoul_l(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr,
+    int base, locale_t loc)
 {
 	const wchar_t *s;
 	unsigned long acc;
@@ -48,13 +51,14 @@ wcstoul(const wchar_t * __restrict nptr,
 	unsigned long cutoff;
 	int neg, any, cutlim;
 
+	NORMALIZE_LOCALE(loc);
 	/*
 	 * See strtol for comments as to the logic used.
 	 */
 	s = nptr;
 	do {
 		c = *s++;
-	} while (iswspace(c));
+	} while (iswspace_l(c, loc));
 	if (c == L'-') {
 		neg = 1;
 		c = *s++;
@@ -79,8 +83,8 @@ wcstoul(const wchar_t * __restrict nptr,
 	cutlim = ULONG_MAX % base;
 	for ( ; ; c = *s++) {
 #ifdef notyet
-		if (iswdigit(c))
-			c = digittoint(c);
+		if (iswdigit_l(c, loc))
+			c = digittoint_l(c, loc);
 		else
 #endif
 		if (c >= L'0' && c <= L'9')
@@ -113,3 +117,9 @@ noconv:
 		*endptr = (wchar_t *)(any ? s - 1 : nptr);
 	return (acc);
 }
+
+unsigned long
+wcstoul(const wchar_t * __restrict nptr, wchar_t ** __restrict endptr, int base)
+{
+	return wcstoul_l(nptr, endptr, base, __current_locale());
+}
